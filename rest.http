@baseUrl = http://localhost:3000

##### ---------------------------------------------- USER ----------------------------------------------------------- 

### Get all users
GET {{baseUrl}}/api/users/all

### Get single users
GET {{baseUrl}}/api/users

### Add a new user
POST {{baseUrl}}/api/users
Content-Type: application/json

{
  "name": "Sophia Grant",
  "email": "sophia.g@gmail.com",
  "password": "SophiaSafe987",
  "designation": "DevOps Specialist",
  "task": 4,
  "ratings": 5
}

### update a user
PATCH {{baseUrl}}/api/users
Content-Type: application/json

{
  "mentor" : true 
}

##### ---------------------------------------------- AUTH ----------------------------------------------------------- 

### authenticate user  (login)
### use the token from cookies and not from the res accessToken , refreshToken
POST {{baseUrl}}/api/auth
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "password": "Password123"
}

### endpoint to get a new jwt token using the refresh token
POST {{baseUrl}}/api/auth/refresh-token


### logout user
POST {{baseUrl}}/api/auth/logout
Content-Type: application/json

{}

##### ---------------------------------------------- MESSAGE ----------------------------------------------------------- 
## connect socket for real time experience to the base route pass userId as a query param (auth is not added for this yet)
## listen to receive_message event its emitted when ever a new message is sent 

### send message 
POST {{baseUrl}}/api/messages
Content-Type: application/json

{
  "receiver": "6845924daee2a515b38a3b91",
  "content": "cool"
}

### get all message by the user 
GET {{baseUrl}}/api/messages

### get all message by the user and a single receiver
GET {{baseUrl}}/api/messages/6845924daee2a515b38a3b91

### with limits  start (start from what message) , limit (how many messages to get ) , max limit is 100
GET {{baseUrl}}/api/messages/<receiverId>?limit=2&start=0

##### ---------------------------------------------- FOLLOWER ----------------------------------------------------------- 

### get all users that a user is following 
GET {{baseUrl}}/api/followers

### get all users full_details = false
GET {{baseUrl}}/api/followers?full_details=false

### get the details of user you are following by follower id 
GET {{baseUrl}}/api/followers/details/6845924daee2a515b38a3b91

### get the count of followers and following for a user 
GET {{baseUrl}}/api/followers/count

### add a new follower 
POST {{baseUrl}}/api/followers
Content-Type: application/json

{
  "following": "6845924daee2a515b38a3b91"
}


### delete a follower (UnFollow)
DELETE {{baseUrl}}/api/followers
Content-Type: application/json

{
  "following": "6845924daee2a515b38a3b91"
}

##### ---------------------------------------------- Reviews (user)----------------------------------------------------------- 

### add a new  review 
POST {{baseUrl}}/api/reviews
Content-Type: application/json

{
  "revieweeId": "684a9932d6e580cffafa6522",
  "message": "good ok",
  "rating": "5"
}

### get all reviews by user   (NOTE : default pagination only first 100 records are returned )
GET {{baseUrl}}/api/reviews/by

### with full-details false ,  start and limit options
GET {{baseUrl}}/api/reviews/by?full_details=false&start=0&limit=10

### all the reviews given to a user  (NOTE : default pagination only first 100 records are returned )
GET {{baseUrl}}/api/reviews/for/6845924daee2a515b38a3b91

### with full-details false ,  start and limit options

GET {{baseUrl}}/api/reviews/for/6845924daee2a515b38a3b91?full_details=false&start=0&limit=10

### delete a review
DELETE {{baseUrl}}/api/reviews
Content-Type: application/json

{
  "reviewId": "684ef32612ac8f522c79ed4b"
}

### update a review (message an rating can be optional but either one of them has to be provided)
PATCH {{baseUrl}}/api/reviews
Content-Type: application/json

{
  "reviewId": "684ef52fc9247ee1162912de",
  "message": "Not that grate",
  "rating": "1"
}

## ---------------------------------------------- MENTORS  ------------------------------------------------------

### get all mentors
GET {{baseUrl}}/api/mentors

### get mentors with filter  (default pagination first 100 records are returned) 
GET {{baseUrl}}/api/mentors?start=0&limit=1

### get mentors by id (this is nothing but user id , _id)
GET {{baseUrl}}/api/mentors/684fb5eda88b2fa17dc18728

### get total number of mentors 
GET {{baseUrl}}/api/mentors/count

## ---------------------------------------------- TASK  ------------------------------------------------------

### get all tasks (default pagination first 100 records)
GET {{baseUrl}}/api/tasks

### with start , limit , full_details option
GET {{baseUrl}}/api/tasks?full_details=false&start=0&limit=1

### add a new task  (timeToComplete to be in minutes and whole number)
POST {{baseUrl}}/api/tasks
Content-Type: application/json

{
  "title": "Introduction to Node.js version 2",
  "description": "A beginner-friendly course on building backend applications using Node.js.",
  "category": "Programming",
  "timeToComplete": 120,
  "displayMedia": "https://i.imgur.com/TA6fMfY.jpeg",
  "displayMediaType": "image"
}

### delete a task by the taskId (_id)
DELETE  {{baseUrl}}/api/tasks
Content-Type: application/json

{
  "taskId":"685002cf56195e1cea8d325a"
}

## ---------------------------------------------- USER_TASK  ------------------------------------------------------

### get all the user tasks 
GET {{baseUrl}}/api/user-tasks

### add a new user task 
POST {{baseUrl}}/api/user-tasks
Content-Type: application/json

{
  "taskId":"685002cf56195e1cea8d325a"
}

### update a user task
PATCH {{baseUrl}}/api/user-tasks
Content-Type: application/json

{
  "userTaskId":"6850168765f4ca6300ad5a3e",
  "status": "quit"
}

## ---------------------------------------------- UPLOADS ----------------------------------------

### Upload an image do this in postman 
### Create a new POST request tab.
### body -> form data -> key = image , select file 
### file to not be more than 1MB
POST {{baseUrl}}/api/uploads/image
